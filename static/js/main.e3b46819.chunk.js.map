{"version":3,"sources":["Header.jsx","DayTitles.jsx","Day.jsx","Week.jsx","TimeCalendar.jsx","index.js"],"names":["Header","props","react_default","a","createElement","className","onClick","prevMonth","currentMonth","nextMonth","defaultProps","DayTitles","days","startDate","dateFns","startOfWeek","this","i","push","key","format","addDays","React","Component","Day","concat","onDateClick","date","Weeks","_this","_this$props","selectedDate","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","day","formattedDate","_loop","isToday","isSameMonth","isSameDay","clickable","cloneDay","src_Day","TimeCalendar","state","Date","disableHistory","console","log","setState","addMonths","isPast","subMonths","src_Header","DayTitles_DayTitles","Week_Weeks","timeSelect","ReactDOM","render","TimeCalendar_TimeCalendar","document","getElementById"],"mappings":"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","file":"static/js/main.e3b46819.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = props => (\r\n  <div className=\"header row flex-middle\">\r\n  <div className=\"col col-start\">\r\n  <div className=\"icon\" onClick={props.prevMonth}>\r\n  chevron_left\r\n  </div>\r\n  </div>\r\n  <div className=\"col col-center\">\r\n  <span>{props.currentMonth}</span>\r\n  </div>\r\n  <div className=\"col col-end\" onClick={props.nextMonth}>\r\n  <div className=\"icon\">chevron_right</div>\r\n  </div>\r\n  </div>\r\n);\r\n\r\nHeader.propTypes = {\r\n  currentMonth: PropTypes.string,\r\n  prevMonth: PropTypes.func,\r\n  nextMonth: PropTypes.func,\r\n};\r\n\r\nHeader.defaultProps = {\r\n  currentMonth: 'March 2019',\r\n  prevMonth: null,\r\n  nextMonth: null,\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport dateFns from \"date-fns\";\r\n\r\nexport default class DayTitles extends React.Component {\r\n  render() {\r\n    const dateFormat = \"dddd\";\r\n    const days = [];\r\n    let startDate = dateFns.startOfWeek(this.props.currentMonth);\r\n    for (let i = 0; i < 7; i++) {\r\n      days.push(\r\n        <div className=\"col col-center\" key={i}>\r\n        {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n        </div>\r\n      );\r\n    }\r\n    return <div className=\"days row\">{days}</div>;\r\n  }\r\n}\r\n\r\nDayTitles.propTypes = {\r\n  currentMonth: PropTypes.instanceOf(dateFns),\r\n};\r\n\r\nDayTitles.defaultProps = {\r\n  currentMonth: null,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Day = props => (\r\n  <div className={`col cell${props.className}`} onClick={props.onDateClick}>\r\n  <span className=\"number\">{props.date}</span>\r\n  <span className=\"bg\">{props.date}</span>\r\n  </div>\r\n);\r\n\r\nDay.propTypes = {\r\n  className: PropTypes.string,\r\n  onDateClick: PropTypes.func,\r\n  date: PropTypes.number,\r\n};\r\n\r\nDay.defaultProps = {\r\n  className: '',\r\n  date: 1,\r\n  onDateClick: null,\r\n};\r\n\r\nexport default Day;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport dateFns from \"date-fns\";\r\nimport Day from './Day';\r\n\r\n\r\nexport default class Weeks extends React.Component {\r\n\r\n  render() {\r\n    const { currentMonth, selectedDate } = this.props;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart);\r\n    const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n    const dateFormat = \"D\";\r\n    const rows = [];\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n\r\n        let className = '';\r\n        if (dateFns.isToday(day)) {\r\n          className += ' today';\r\n        }\r\n        if (!dateFns.isSameMonth(day, currentMonth)) {\r\n          className += ' disabled';\r\n        }\r\n        if (dateFns.isSameDay(day, selectedDate)) {\r\n          className += ' selected';\r\n        }\r\n        if (!this.props.clickable) {\r\n          className += ' not-clickable';\r\n        }\r\n\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        const cloneDay = day;\r\n        days.push(\r\n          <Day\r\n          className={className}\r\n          key={day}\r\n          date={formattedDate}\r\n          onDateClick={() => this.props.onDateClick(cloneDay)}\r\n          >\r\n          </Day>\r\n        );\r\n        day = dateFns.addDays(day, 1);\r\n      }\r\n      rows.push(\r\n        <div className=\"row\" key={day}>\r\n        {days}\r\n        </div>\r\n      );\r\n      days = [];\r\n    }\r\n    return <div className=\"body\">{rows}</div>;\r\n  }\r\n}\r\n\r\nWeeks.propTypes = {\r\n  currentMonth: PropTypes.instanceOf(dateFns),\r\n  selectedDate: PropTypes.instanceOf(dateFns),\r\n  onDateClick: PropTypes.func,\r\n  clickable: PropTypes.bool,\r\n};\r\n\r\nWeeks.defaultProps = {\r\n  currentMonth: null,\r\n  selectedDate: null,\r\n  onDateClick: null,\r\n  clickable: true,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport dateFns from \"date-fns\";\r\nimport Header from './Header';\r\nimport DayTitles from './DayTitles';\r\nimport Weeks from './Week';\r\nimport \"./App.css\";\r\n\r\nexport default class TimeCalendar extends React.Component {\r\n  state = {\r\n    currentMonth: new Date(),\r\n    selectedDate: new Date(),\r\n    disableHistory: this.props.disableHistory,\r\n  };\r\n\r\n  onDateClick = day => {\r\n    console.log(day);\r\n    this.setState({\r\n      selectedDate: day\r\n    });\r\n  };\r\n\r\n  nextMonth = () => {\r\n    this.setState({\r\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\r\n    });\r\n  };\r\n\r\n  prevMonth = () => {\r\n    if (this.state.disableHistory) {\r\n      if (dateFns.isPast(this.state.currentMonth)){\r\n        return\r\n      }\r\n    }\r\n    this.setState({\r\n      currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"calendar\">\r\n      <Header\r\n      nextMonth={this.nextMonth}\r\n      prevMonth={this.prevMonth}\r\n      currentMonth={dateFns.format(this.state.currentMonth, \"MMMM YYYY\")}\r\n      />\r\n      <DayTitles currentMonth={this.state.currentMonth} />\r\n      <Weeks\r\n      currentMonth={this.state.currentMonth}\r\n      selectedDate={this.state.selectedDate}\r\n      onDateClick={this.onDateClick}\r\n      clickable={this.props.clickable}\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTimeCalendar.propTypes = {\r\n  disableHistory: PropTypes.bool,\r\n  timeSelect: PropTypes.bool,\r\n  clickable: PropTypes.bool,\r\n};\r\n\r\nTimeCalendar.defaultProps = {\r\n  disableHistory: true,\r\n  timeSelect: false,\r\n  clickable: true,\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TimeCalendar from './TimeCalendar';\n\n\nfunction Welcome() {\n  return <TimeCalendar\n  disableHistory={true}\n  />;\n}\nReactDOM.render(<Welcome />, document.getElementById('root'));\n"],"sourceRoot":""}